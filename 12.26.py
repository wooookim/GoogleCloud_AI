# 컴퓨터는 숫자를 비트로 표현 > 최종적으로 근사값으로 표현

print(0.1 + 0.1 == 0.2)  # True
print(0.1 + 0.2 == 0.3)  # False

# 정수는 정수영역만 다룰 수 있는 대신 항상 정확
# 부동소수점은 실수 영역까지 다룰 수 있지만 정확성을 보장하지 못함


# 문자열 처리
# print(' Jack's favorite food is burger ')  # 에러
print(" Jack's favorite food is burger ")


# escape 코드(\) : 특별한 의미를 갖는 코드 - 미리 정의해둔 문자 조합
# \n : 개행(줄 바꿈)
# \t : tab
# \b : 백스페이스
# \\ : '\' 출력


print(
    """
      "집에가고싶다"
      - "김성우"
      """
)

print(int("2023" + "1997"))


print(
    """
      ==============
      이것이 파이썬
      ==============
      """
)

str = "탁월하다는 것은 아는 것만으로는 충분치 않으며, 탁월해지기 위해, 이를 발휘하기 위해 노력해야 한다."
print(str)

print(str[-1])

##########################################################################
# 포멧 저장(',' 없이 사용)
print("%d" % 97)
print("%s" % "김성우")
print("%d %s" % (97, "김성우"))
print("%15s" % "hi")  # 공백 출력
print("%0.5f" % 3.141592)  # 소수점 자루수 설정


##########################################################################
# f-string
# 중괄호를 사용해 파이썬의 표현식을 삽입할 수 있도록 하는 formatting 기법

x, y = 1, 2

print(f"{x} + {y} 는 {x + y}입니다.")


##########################################################################
# 문자열 메서드
# 문자열 자료형이 자체적으로 가지고 있는 함수
# 사용 - 문자열 변수명 뒤에 dot(.)을 붙인 다음 적절한 함수를 호출
string = "apple"
print(string.count("p"))

sentence = "오늘은 화요일, 내일은 수요일"
print(sentence.find("내일은"))
print(sentence.index("내일은"))
# 둘 다 같은 인덱스 반환
print(sentence.find("금요일"))  # 없으면 -1
# print(sentence.index("금요일"))  # 없으면 에러
# 에러 반환 시 프로그램이 멈추므로 주의


##########################################################################
# 문자열 삽입 : join
# 문자열의 각각의 문자 사이에 특정 구분자 또는 문자열을 삽입
str1 = ","
str2 = "abcdef"

print(str1.join(str2))


##########################################################################
# 공백 지우기 : strip(), rstrip(), lstrip()

##########################################################################
# 문자열 바꾸기 : replace(a, b) -> a를 b로
